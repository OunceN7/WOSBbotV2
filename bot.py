import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.enums import ChatMemberStatus
from aiogram.utils.keyboard import ReplyKeyboardRemove
import asyncio
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
import os
TOKEN = os.getenv("TOKEN")
ADMIN_ID = 509766436
GROUP_ID = -1002400274681

# === –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ===
bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    nickname TEXT,
    join_date TEXT,
    in_group INTEGER
)
""")
conn.commit()

# === –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–ò–¢ –õ–ò –í –ì–†–£–ü–ü–ï ===
async def check_membership(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(GROUP_ID, user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR]
    except:
        return False

# === /start ===
@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    in_group = await check_membership(user_id)

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone():
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ –∏–≥—Ä–µ:")
    dp.message.register(save_nickname, user_id=user_id, username=username, in_group=in_group)

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ò–ö–ê ===
async def save_nickname(message: Message, user_id: int, username: str, in_group: bool):
    nickname = message.text.strip()
    join_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    cursor.execute(
        "INSERT INTO users (user_id, username, nickname, join_date, in_group) VALUES (?, ?, ?, ?, ?)",
        (user_id, username, nickname, join_date, int(in_group))
    )
    conn.commit()

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {nickname} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=ReplyKeyboardRemove())

# === /—Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
@dp.message(Command("—Å–ø–∏—Å–æ–∫"))
async def send_user_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    cursor.execute("SELECT user_id, username, nickname, join_date, in_group FROM users")
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for row in rows:
        uid, uname, nick, date, ingrp = row
        text += f"- {nick} (@{uname}) ‚Äî {date} ‚Äî {'‚úÖ' if ingrp else '‚ùå'}\n"
    await message.answer(text)

# === /—Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
@dp.message(Command("—Ä–∞—Å—Å—ã–ª–∫–∞"))
async def ask_broadcast_text(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    dp.message.register(do_broadcast)

async def do_broadcast(message: Message):
    text = message.text.strip()
    cursor.execute("SELECT user_id FROM users WHERE in_group = 1")
    users = cursor.fetchall()

    count = 0
    for (uid,) in users:
        try:
            await bot.send_message(uid, text)
            count += 1
        except:
            pass
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# === –ó–ê–ü–£–°–ö ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())